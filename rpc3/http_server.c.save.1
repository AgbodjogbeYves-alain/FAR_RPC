/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "http.h"

void *
http_null_1_svc(void *argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return (void *) &result;
}

response *
http_request1_1_svc(data1 *argp, struct svc_req *rqstp)
{
	static response  result;
	char port[8];
  	char *pos;
  	char buffer[256];
  	char root[256] = "public_html";
  	FILE* fichier = NULL;
	 /* Renseignement du port d'écoute */
  	printf("Port d'écoute : ");
  	fgets(port, 8, stdin);
  	if ((pos=strchr(port, '\n')) != NULL) *pos = '\0';
	if(strlen(port)==0){
     		port[0] = '8';
     		port[1] = '0';
  	}
	/* Socket et contexte d'adressage du serveur */
 	 struct sockaddr_in sin;
  	int sock;
  	socklen_t recsize = sizeof(sin);
  	pid_t pid;

  	/* Socket et contexte d'adressage du client */
  	struct sockaddr_in csin;
  	int csock;
  	socklen_t crecsize = sizeof(csin);
 
  	/* Creation d'une socket */
  	sock = socket(AF_INET, SOCK_STREAM, 0);

  	/* Configuration */
  	sin.sin_addr.s_addr = htonl(INADDR_ANY);  /* Adresse IP automatique */
  	sin.sin_family = AF_INET;                 /* Protocole familial (IP) */
  	sin.sin_port = htons(atoi(port));               /* Listage du port */
  	bind(sock, (struct sockaddr*)&sin, recsize);


  	/* Demarrage du listage (mode server) */
  	listen(sock, 5);
  	printf("Serveur %s sur le port %d\n", inet_ntoa(sin.sin_addr), htons(sin.sin_port));
	/* Attente du message du client et affichage */
    	recv(csock, buffer, TAILLE,0);
    	printf("Message du client n°%d: %s", csock, buffer);

    	/* Verification de la demande*/
    	char *tok = strtok(buffer, " ");

    	if(strcmp(tok, "GET") == 0){
      		printf("Requete acceptée\n");
		//On récupère la page demandée dans tok
      		tok = strtok(NULL, " ");
      		if(strcmp(tok, "/") == 0){
           		strcat(tok, "index.html");
      		}
      		strcat(root, tok);
      		printf("Tentative d'ouverture de -%s-\n",root);
		result
	return &result;
}

response *
http_request2_1_svc(data2 *argp, struct svc_req *rqstp)
{
	static response  result;

	while(1){

      		if (fichier != NULL){
          		printf("Envoi des données...\n");
          		send(csock, "HTTP/1.1 200 OK\n\n", 17, 0);
          		while(fgets(buffer, TAILLE, fichier) != NULL){
	          		send(csock, buffer, strlen(buffer), 0);
          		}
			fclose(fichier);
      		}else{
        		printf("Page non existante\n");
		}

	return &result;
}
